// This is your Prisma schema file for tenant databases,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/tenant"
}

datasource db {
  provider = "mysql"
  url      = env("TENANT_DATABASE_URL")
}

model Entreprises {
  id        Int      @id @default(autoincrement())
  nom       String
  logo      String?
  adresse   String
  paiement  String   @default("XOF") //espece de paiement
  dbName    String?  @unique // nom de la DB tenant
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       Users[]
  employees   Employee[]
  payRuns     PayRun[]
  pointages   Pointage[]
  attendances Attendance[]
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  nom       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entreprise   Entreprises? @relation(fields: [entrepriseId], references: [id])
  entrepriseId Int?
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CAISSIER
}

enum TypeContrat {
  JOURNALIER
  FIXE
  HONORAIRE
}

enum ModePaiement {
  ESPECES
  VIREMENT_BANCAIRE
  ORANGE_MONEY
  WAVE
}

enum StatusPayRun {
  BROUILLON
  APPROUVE
  CLOTURE
}

enum StatusPayslip {
  PAYE
  PARTIEL
  EN_ATTENTE
}

enum AttendanceStatus {
  PRESENT
  RETARD
  ABSENT
}

model Employee {
  id                   Int         @id @default(autoincrement())
  nom                  String
  email                String      @unique
  poste                String
  typeContrat          TypeContrat
  tauxSalaire          Decimal
  joursTravailles      Int? // for journalier
  coordonneesBancaires String?
  qrCode               String?     @unique // QR code unique pour pointage
  confirmationCode     String? // Code de confirmation pour recevoir le QR
  actif                Boolean     @default(true)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  entrepriseId Int
  entreprise   Entreprises @relation(fields: [entrepriseId], references: [id])

  payslips    Payslip[]
  pointages   Pointage[]
  attendances Attendance[]
}

model PayRun {
  id        Int          @id @default(autoincrement())
  periode   DateTime
  type      String // MENSUEL, HEBDOMADAIRE, JOURNALIER
  status    StatusPayRun @default(BROUILLON)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  entrepriseId Int
  entreprise   Entreprises @relation(fields: [entrepriseId], references: [id])

  payslips Payslip[]
}

model Payslip {
  id         Int           @id @default(autoincrement())
  employeeId Int
  payRunId   Int
  brut       Decimal
  deductions Decimal       @default(0)
  net        Decimal
  status     StatusPayslip @default(EN_ATTENTE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  employee Employee  @relation(fields: [employeeId], references: [id])
  payRun   PayRun    @relation(fields: [payRunId], references: [id])
  payments Payment[]
}

model Payment {
  id        Int          @id @default(autoincrement())
  payslipId Int
  montant   Decimal
  mode      ModePaiement
  date      DateTime     @default(now())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  payslip Payslip @relation(fields: [payslipId], references: [id])
}

enum TypePointage {
  ARRIVEE
  DEPART
  PAUSE_DEBUT
  PAUSE_FIN
}

model Pointage {
  id         Int          @id @default(autoincrement())
  employeeId Int
  date       DateTime     @default(now())
  type       TypePointage
  heure      DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  entrepriseId Int
  entreprise   Entreprises @relation(fields: [entrepriseId], references: [id])

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id          Int              @id @default(autoincrement())
  employeeId  Int
  date        DateTime // Date of attendance (YYYY-MM-DD)
  status      AttendanceStatus
  arrivalTime DateTime? // Time of arrival
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  entrepriseId Int
  entreprise   Entreprises @relation(fields: [entrepriseId], references: [id])

  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
}
