
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EntreprisesScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  logo: 'logo',
  adresse: 'adresse',
  paiement: 'paiement',
  dbName: 'dbName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  nom: 'nom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  email: 'email',
  password: 'password',
  poste: 'poste',
  typeContrat: 'typeContrat',
  tauxSalaire: 'tauxSalaire',
  joursTravailles: 'joursTravailles',
  coordonneesBancaires: 'coordonneesBancaires',
  qrCode: 'qrCode',
  confirmationCode: 'confirmationCode',
  actif: 'actif',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.PayRunScalarFieldEnum = {
  id: 'id',
  periode: 'periode',
  type: 'type',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.PayslipScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payRunId: 'payRunId',
  brut: 'brut',
  deductions: 'deductions',
  net: 'net',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  payslipId: 'payslipId',
  montant: 'montant',
  mode: 'mode',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PointageScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  type: 'type',
  heure: 'heure',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  status: 'status',
  arrivalTime: 'arrivalTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.CongeRequestScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  typeConge: 'typeConge',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  motif: 'motif',
  status: 'status',
  commentaireRH: 'commentaireRH',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.EntreprisesOrderByRelevanceFieldEnum = {
  nom: 'nom',
  logo: 'logo',
  adresse: 'adresse',
  paiement: 'paiement',
  dbName: 'dbName'
};

exports.Prisma.UsersOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  nom: 'nom'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  nom: 'nom',
  email: 'email',
  password: 'password',
  poste: 'poste',
  coordonneesBancaires: 'coordonneesBancaires',
  qrCode: 'qrCode',
  confirmationCode: 'confirmationCode'
};

exports.Prisma.PayRunOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.CongeRequestOrderByRelevanceFieldEnum = {
  motif: 'motif',
  commentaireRH: 'commentaireRH'
};
exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  CAISSIER: 'CAISSIER',
  EMPLOYEE: 'EMPLOYEE',
  VIGIL: 'VIGIL'
};

exports.TypeContrat = exports.$Enums.TypeContrat = {
  JOURNALIER: 'JOURNALIER',
  FIXE: 'FIXE',
  HONORAIRE: 'HONORAIRE'
};

exports.StatusPayRun = exports.$Enums.StatusPayRun = {
  BROUILLON: 'BROUILLON',
  APPROUVE: 'APPROUVE',
  CLOTURE: 'CLOTURE'
};

exports.StatusPayslip = exports.$Enums.StatusPayslip = {
  PAYE: 'PAYE',
  PARTIEL: 'PARTIEL',
  EN_ATTENTE: 'EN_ATTENTE'
};

exports.ModePaiement = exports.$Enums.ModePaiement = {
  ESPECES: 'ESPECES',
  VIREMENT_BANCAIRE: 'VIREMENT_BANCAIRE',
  ORANGE_MONEY: 'ORANGE_MONEY',
  WAVE: 'WAVE'
};

exports.TypePointage = exports.$Enums.TypePointage = {
  ARRIVEE: 'ARRIVEE',
  DEPART: 'DEPART',
  PAUSE_DEBUT: 'PAUSE_DEBUT',
  PAUSE_FIN: 'PAUSE_FIN'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  RETARD: 'RETARD',
  ABSENT: 'ABSENT'
};

exports.TypeConge = exports.$Enums.TypeConge = {
  ANNUEL: 'ANNUEL',
  MALADIE: 'MALADIE',
  SANS_SOLDE: 'SANS_SOLDE',
  MATERNITE: 'MATERNITE',
  PATERNITE: 'PATERNITE',
  EXCEPTIONNEL: 'EXCEPTIONNEL'
};

exports.StatusConge = exports.$Enums.StatusConge = {
  EN_ATTENTE: 'EN_ATTENTE',
  APPROUVE: 'APPROUVE',
  REJETE: 'REJETE',
  ANNULE: 'ANNULE'
};

exports.Prisma.ModelName = {
  Entreprises: 'Entreprises',
  Users: 'Users',
  Employee: 'Employee',
  PayRun: 'PayRun',
  Payslip: 'Payslip',
  Payment: 'Payment',
  Pointage: 'Pointage',
  Attendance: 'Attendance',
  CongeRequest: 'CongeRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
